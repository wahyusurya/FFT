using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing;
using System.Drawing.Imaging;
using System.Drawing.Drawing2D;

namespace FFT_kelompok09
{
    struct kompleksitas
    {
        public double real, imag;
        public kompleksitas(double x, double y)
        {
            real = x;
            imag = y;
        }
        public float MagImage()
        {
            return ((float)Math.Sqrt(real * real + imag * imag));
        }
        public float Phase()
        {            
             return ((float)Math.Atan(imag / real));
        }
    }
    
    class FastFourier
    {
        public Bitmap Objek;             
        public Bitmap FourierPlot;       
        public Bitmap PhasePlot;         

        public int[,] gambarAbu;         
        public float[,] FourierMagImage;
        public float[,] FourierPhase;

        float[,] FFTLog;                 
        float[,] FFTPhaseLog;            
        public int[,] FFTNormalized;     
        public int[,] FFTPhaseNormalized;
        int nX, nY;                      
        int Width, Height;
        kompleksitas[,] Fourier;              
        public kompleksitas[,] FFTShifted;    
        public kompleksitas[,] Output;        
        public kompleksitas[,] FFTNormal;     
        
        public FastFourier(Bitmap Input)
        {
            Objek = Input;
            Width = nX = Input.Width;
            Height= nY = Input.Height;
            bacaGambar();
        }
        
        public FastFourier(int[,] Input)
        {
            gambarAbu = Input;
            Width = nX = Input.GetLength(0);
            Height = nY = Input.GetLength(1);
        }
        
        public FastFourier(kompleksitas[,] Input)
        {
            nX = Width = Input.GetLength(0);
            nY = Height = Input.GetLength(1);
            Fourier = Input;

        }
        
        public Bitmap Displayimage()
        {
            int i, j;
            Bitmap picture = new Bitmap(Width, Height);
            BitmapData bitmapPicture = picture.LockBits(new Rectangle(0, 0, Width, Height),
                                     ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);
            unsafe
            {

                byte* picturePointer = (byte*)bitmapPicture.Scan0;

                for (i = 0; i < bitmapPicture.Height; i++)
                {
                    for (j = 0; j < bitmapPicture.Width; j++)
                    {
                        picturePointer[0] = (byte)gambarAbu[j, i];
                        picturePointer[1] = (byte)gambarAbu[j, i];
                        picturePointer[2] = (byte)gambarAbu[j, i];
                        picturePointer[3] = (byte)255;
                        picturePointer += 4;
                    }
                    picturePointer += (bitmapPicture.Stride - (bitmapPicture.Width * 4));
                }
            }
            picture.UnlockBits(bitmapPicture);
            return picture;// col;
        }

        private void bacaGambar()
        {
            int i, j;
            gambarAbu = new int[Width, Height];
            Bitmap picture = Objek;
            BitmapData bitmapPicture = picture.LockBits(new Rectangle(0, 0, picture.Width, picture.Height),
                                     ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);
            unsafe
            {
                byte* picturePointer = (byte*)bitmapPicture.Scan0;

                for (i = 0; i < bitmapPicture.Height; i++)
                {
                    for (j = 0; j < bitmapPicture.Width; j++)
                    {
                        gambarAbu[j, i] = (int)((picturePointer[0] + picturePointer[1] + picturePointer[2]) / 3.0);
                        picturePointer += 4;
                    }
                    picturePointer += bitmapPicture.Stride - (bitmapPicture.Width * 4);
                }
            }
            picture.UnlockBits(bitmapPicture);
            return;
        }

        public Bitmap Displayimage(int[,] image)
        {
            int i, j;
            Bitmap output = new Bitmap(image.GetLength(0), image.GetLength(1));
            BitmapData bitmapPicture = output.LockBits(new Rectangle(0, 0, image.GetLength(0), image.GetLength(1)),
                                     ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);
            unsafe
            {
                byte* picturePointer = (byte*)bitmapPicture.Scan0;
                for (i = 0; i < bitmapPicture.Height; i++)
                {
                    for (j = 0; j < bitmapPicture.Width; j++)
                    {
                        picturePointer[0] = (byte)image[j, i];
                        picturePointer[1] = (byte)image[j, i];
                        picturePointer[2] = (byte)image[j, i];
                        picturePointer[3] = 255;
                        picturePointer += 4;
                    }
                    picturePointer += (bitmapPicture.Stride - (bitmapPicture.Width * 4));
                }
            }
            output.UnlockBits(bitmapPicture);
            return output;// col;

        }
        
        public void ForwardFFT()
        {
            int i,j;
            Fourier =new kompleksitas [Width,Height];
            Output = new kompleksitas[Width, Height];
            for (i=0;i<=Width -1;i++)
                for (j = 0; j <= Height - 1; j++)
                {
                    Fourier[i, j].real =(double) gambarAbu[i, j];
                    Fourier[i, j].imag = 0;
                }
            Output= FFT2D( Fourier, nX, nY, 1);
            return;
        }
        
        public void FFTShift()
        {
            int i, j;
            FFTShifted = new kompleksitas[nX, nY];

            for(i=0;i<=(nX/2)-1;i++)
                for (j = 0; j <= (nY / 2) - 1; j++)
                {
                    FFTShifted[i + (nX / 2), j + (nY / 2)] = Output[i, j];
                    FFTShifted[i, j] = Output[i + (nX / 2), j + (nY / 2)];
                    FFTShifted[i + (nX / 2), j] = Output[i , j + (nY / 2)];
                    FFTShifted[i, j + (nX / 2)] = Output[i + (nX / 2), j ];
                }

            return;
        }
        
        public void hapusFFTShift()
        {
            int i, j;
            FFTNormal = new kompleksitas[nX, nY];

            for (i = 0; i <= (nX / 2) - 1; i++)
                for (j = 0; j <= (nY / 2) - 1; j++)
                {
                    FFTNormal[i + (nX / 2), j + (nY / 2)] = FFTShifted[i, j];
                    FFTNormal[i, j] = FFTShifted[i + (nX / 2), j + (nY / 2)];
                    FFTNormal[i + (nX / 2), j] = FFTShifted[i, j + (nY / 2)];
                    FFTNormal[i, j + (nX / 2)] = FFTShifted[i + (nX / 2), j];
                }
            return;
        }
        
        public void FFTPlot(kompleksitas[,]Output)
        {
            int i, j;
            float maksimasi;
       
            FFTLog = new float[nX, nY];
            FFTPhaseLog = new float[nX, nY];

            FourierMagImage = new float[nX, nY];
            FourierPhase = new float[nX, nY];

            FFTNormalized = new int[nX, nY];
            FFTPhaseNormalized = new int[nX, nY];

            for (i = 0; i <= Width - 1; i++)
                for (j = 0; j <= Height - 1; j++)
                {
                    FourierMagImage[i, j] = Output[i, j].MagImage();
                    FourierPhase[i, j] = Output[i, j].Phase();
                    FFTLog[i, j] = (float)Math.Log(1 + FourierMagImage[i, j]);
                    FFTPhaseLog[i, j] = (float)Math.Log(1 + Math.Abs(FourierPhase[i, j]));
                }
            maksimasi = FFTLog[0, 0];
            for (i = 0; i <= Width - 1; i++)
                for (j = 0; j <= Height - 1; j++)
                {
                    if (FFTLog[i, j] > maksimasi)
                        maksimasi = FFTLog[i, j];
                }
            for (i = 0; i <= Width - 1; i++)
                for (j = 0; j <= Height - 1; j++)
                {
                    FFTLog[i, j] = FFTLog[i, j] / maksimasi;
                }
            for (i = 0; i <= Width - 1; i++)
                for (j = 0; j <= Height - 1; j++)
                {
                    FFTNormalized[i, j] = (int)(2000 * FFTLog[i, j]);
                }
            FourierPlot = Displayimage(FFTNormalized);

            FFTPhaseLog[0, 0] = 0;
            maksimasi = FFTPhaseLog[1, 1];
            for (i = 0; i <= Width - 1; i++)
                for (j = 0; j <= Height - 1; j++)
                {
                    if (FFTPhaseLog[i, j] > maksimasi)
                        maksimasi = FFTPhaseLog[i, j];
                }
            for (i = 0; i <= Width - 1; i++)
                for (j = 0; j <= Height - 1; j++)
                {
                    FFTPhaseLog[i, j] = FFTPhaseLog[i, j] / maksimasi;
                }
            for (i = 0; i <= Width - 1; i++)
                for (j = 0; j <= Height - 1; j++)
                {
                    FFTPhaseNormalized[i, j] = (int)(255 * FFTPhaseLog[i, j]);
                }
            PhasePlot = Displayimage(FFTPhaseNormalized);
        }
        
        public void FFTPlot()
        {
            int i, j;
            float maksimasi;
            FFTLog = new float [nX,nY];
            FFTPhaseLog = new float[nX, nY];

            FourierMagImage = new float[nX, nY];
            FourierPhase = new float[nX, nY];

            FFTNormalized = new int[nX, nY];
            FFTPhaseNormalized = new int[nX, nY];

            for(i=0;i<=Width-1;i++)
                for (j = 0; j <= Height-1; j++)
                {
                    FourierMagImage[i, j] = Output[i, j].MagImage();
                    FourierPhase[i, j] = Output[i, j].Phase();
                    FFTLog[i, j] = (float)Math.Log(1 + FourierMagImage[i, j]);
                    FFTPhaseLog[i, j] = (float)Math.Log(1 + Math.Abs(FourierPhase[i, j]));
                }

            maksimasi = FFTLog[0, 0];
            for(i=0;i<=Width-1;i++)
                for (j = 0; j <= Height-1; j++)
                {
                    if (FFTLog[i, j] > maksimasi)
                        maksimasi = FFTLog[i, j];
                }
            for(i=0;i<=Width-1;i++)
                for (j = 0; j <= Height-1; j++)
                {
                    FFTLog[i, j] = FFTLog[i, j] / maksimasi;
                }
            for(i=0;i<=Width-1;i++)
                for (j = 0; j <= Height-1; j++)
                {
                    FFTNormalized [i,j]=(int)(1000*FFTLog[i,j]);
                }
            FourierPlot = Displayimage(FFTNormalized);
            maksimasi = FFTPhaseLog[0, 0];
            for (i = 0; i <= Width-1; i++)
                for (j = 0; j <= Height-1; j++)
                {
                    if (FFTPhaseLog[i, j] > maksimasi)
                        maksimasi = FFTPhaseLog[i, j];
                }
            for (i = 0; i <= Width-1; i++)
                for (j = 0; j <= Height-1; j++)
                {
                    FFTPhaseLog[i, j] = FFTPhaseLog[i, j] / maksimasi;
                }
            for (i = 0; i <= Width-1; i++)
                for (j = 0; j <= Height-1; j++)
                {
                    FFTPhaseNormalized[i, j] = (int)(2000 * FFTLog[i, j]);
                }
            PhasePlot = Displayimage(FFTPhaseNormalized);


        }
        
        public void InverseFFT()
        {
            int i, j;
           
            Output =new kompleksitas [nX,nY];
            Output = FFT2D(Fourier, nX, nY, -1);

            for (i = 0; i <= Width - 1; i++)
                for (j = 0; j <= Height - 1; j++)
                {
                    gambarAbu[i, j] = (int)Output[i, j].MagImage(); 
                    
                }
            Objek = Displayimage(gambarAbu);
            return;

        }
        // mengenerate Inverse FFT yang di dapat dari Input Fourier
        public void InverseFFT(kompleksitas [,] Fourier)
        {
            //menginisiasi array dari Fourier Transform
            int i, j;

            //memanggil fungsi Forward Fourier Transform
            Output = new kompleksitas[nX, nY];
            Output = FFT2D(Fourier, nX, nY, -1);


            //mengcopy gambar rgb ke grayscale
            //mengcopy data gambar kedalam array kompleks
            for (i = 0; i <= Width - 1; i++)
                for (j = 0; j <= Height - 1; j++)
                {
                    gambarAbu[i, j] = (int)Output[i, j].MagImage();

                }
            Objek = Displayimage(gambarAbu);
            return;

        }
        
        public kompleksitas [,] FFT2D(kompleksitas[,] c, int nx, int ny, int dir)
          {
            int i,j;
            int m;//Power dari 2 angka pada suatu point titik
            double []real;
            double []imag;
            kompleksitas [,] output;
            output = c; // mengcopy array
            // transformasi baris
            real = new double[nx] ;
            imag = new double[nx];
            
            for (j=0;j<ny;j++) 
            {
              for (i=0;i<nx;i++) 
               {
                 real[i] = c[i,j].real;
                 imag[i] = c[i,j].imag;
               }
            // memanggil fungsi FFT 1D untuk baris
            m = (int)Math.Log((double)nx, 2);//menemukan power dari 2 angka dari point
            FFT1D(dir,m,ref real,ref imag);

              for (i=0;i<nx;i++) 
               {
                   output[i, j].real = real[i];
                   output[i, j].imag = imag[i];
               }
            }
            // transformasi kolom 
            real = new double[ny];
            imag = new double[ny];
                  
            for (i=0;i<nx;i++) 
            {
              for (j=0;j<ny;j++) 
               {
                   real[j] = output[i, j].real;
                   imag[j] = output[i, j].imag;
               }

           // memanggil fungsi FFT 1D untuk kolom
           m = (int)Math.Log((double)ny, 2);//mencari power dari 2 angka terbaru dari suatu point
           FFT1D(dir,m,ref real,ref imag);
             for (j=0;j<ny;j++) 
               {
                output[i, j].real = real[j];
                output[i, j].imag = imag[j];
               }
            }
            return(output);
        }
        
        private void FFT1D(int dir, int m, ref double[] x, ref double[] y )
            {
                long nilai, i, p, j, k, q, l, o, w;
                double c1, c2, tx, ty, t1, t2, u1, u2, z;
                //menghitung jumlah point
                nilai = 1;
                for (i = 0; i < m; i++)
                    nilai *= 2;
                // melakukan pembalikan bit
                q = nilai >> 1;
                j = 0;
                for (i = 0; i < nilai - 1; i++)
                {
                    if (i < j)
                    {
                        tx = x[i];
                        ty = y[i];
                        x[i] = x[j];
                        y[i] = y[j];
                        x[j] = tx;
                        y[j] = ty;
                    }
                    k = q;
                    while (k <= j)
                    {
                        j -= k;
                        k >>= 1;
                    }
                    j += k;
                }
                // menghitung FFT
                c1 = -1.0;
                c2 = 0.0;
                w = 1;
                for (l = 0; l < m; l++)
                {
                    o = w;
                    w <<= 1;
                    u1 = 1.0;
                    u2 = 0.0;
                    for (j = 0; j < o; j++)
                    {
                        for (i = j; i < nilai; i += w)
                        {
                            p = i + o;
                            t1 = u1 * x[p] - u2 * y[p];
                            t2 = u1 * y[p] + u2 * x[p];
                            x[p] = x[i] - t1;
                            y[p] = y[i] - t2;
                            x[i] += t1;
                            y[i] += t2;
                        }
                        z = u1 * c1 - u2 * c2;
                        u2 = u1 * c2 + u2 * c1;
                        u1 = z;
                    }
                    c2 = Math.Sqrt((1.0 - c1) / 2.0);
                    if (dir == 1)
                        c2 = -c2;
                    c1 = Math.Sqrt((1.0 + c1) / 2.0);
                }
                // penskalaan untuk transformasi maju
                if (dir == 1)
                {
                    for (i = 0; i < nilai; i++)
                    {
                        x[i] /= (double)nilai;
                        y[i] /= (double)nilai;
                       
                    }
                }
                return;
            }
        
    }
}
